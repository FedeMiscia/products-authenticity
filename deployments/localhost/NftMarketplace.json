{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "returnTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NftMarketplace__AlreadyListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketplace__NotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketplace__NotApprovedForMarketplace",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NftMarketplace__NotInStaking",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NftMarketplace__NotListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketplace__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketplace__StillTimeToRecess",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ItemBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ItemCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ItemListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "TokenGetBack",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Token_Transfered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "buyItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "address_id_encoded",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReturnTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getSeller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTransaction",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "listItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "encoded",
          "type": "bytes"
        }
      ],
      "name": "multiDecodeNFTData",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "multiEncodeNFTData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "takeBackToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferTokenAfterTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3ef3dc109353b0d45e599f794444c4abb8659db3802080d2d0d51ba6a861b371",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1838869",
    "logsBloom": "0x
    "blockHash": "0x663e26c4e19c2dc5441526446410c852d24f7216515caf4aa0645beeb7f6423b",
    "transactionHash": "0x3ef3dc109353b0d45e599f794444c4abb8659db3802080d2d0d51ba6a861b371",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "1838869",
    "status": 1,
    "byzantium": true
  },
  "args": [
    120
  ],
  "numDeployments": 1,
  "solcInputHash": "e6955afe1cff9ad6cb8bad18139bdc7a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"returnTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NftMarketplace__AlreadyListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketplace__NotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketplace__NotApprovedForMarketplace\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NftMarketplace__NotInStaking\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NftMarketplace__NotListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketplace__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketplace__StillTimeToRecess\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ItemBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ItemCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ItemListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"TokenGetBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Token_Transfered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"address_id_encoded\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReturnTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getSeller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTransaction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"listItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encoded\",\"type\":\"bytes\"}],\"name\":\"multiDecodeNFTData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"multiEncodeNFTData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"takeBackToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferTokenAfterTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NftMarketplace.sol\":\"NftMarketplace\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/NftMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\"; // Import necessario per poter richiamare alcune funzioni che manipolano gli NFT, tra cui la funzione di approvazione per lavorare con un NFT e la funzione per trasferire un NFT\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\"; //Import necessario per il modifier nonReentrant\\nimport \\\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\\\";\\n\\nerror NftMarketplace__NotApprovedForMarketplace();\\nerror NftMarketplace__AlreadyListed(address nftAddress, uint256 tokenId);\\nerror NftMarketplace__NotOwner();\\nerror NftMarketplace__NotListed(address nftAddress, uint256 tokenId);\\nerror NftMarketplace__TransferFailed();\\nerror NftMarketplace__StillTimeToRecess();\\nerror NftMarketplace__NotInStaking(address nftAddress, uint256 tokenId);\\nerror NftMarketplace__NotAllowed();\\n\\n// Contratto che gestisce la compravendita di NFT. Ereditiamo da ReentrancyGuard per alcune funzionalit\\u00e0 di sicurezza e dall'interfaccia AutomationCompatible per introdurre dell'automazione nelle funzioni\\ncontract NftMarketplace is ReentrancyGuard, AutomationCompatibleInterface {\\n    // Struttura dati per gestire lo staking di un NFT appena effettuato l'acquisto del corrispondente prodotto.\\n    // Nel lasso di tempo in cui \\u00e8 possibile riportare indietro un prodotto il marketplace detiene in staking l'NFT prima di trasferirlo ufficialmente.\\n    // Bisogna quindi tenere traccia dell'NFT in staking, del tempo rimanente, del venditore e dell'acquirente\\n    struct Transaction {\\n        address seller;\\n        address buyer;\\n        uint startTimestamp; // Timestamp del momento dell'acquisto\\n    }\\n\\n    // Evento che sar\\u00e0 emesso dopo il listing di un NFT\\n    event ItemListed(\\n        address indexed seller,\\n        address indexed nftAddress,\\n        uint256 indexed tokenId\\n    );\\n\\n    // Evento emesso a seguito del completamento della funzione di acquisto\\n    event ItemBought(\\n        address indexed buyer,\\n        address indexed nftAddress,\\n        uint256 indexed tokenId\\n    );\\n\\n    event ItemCancelled(\\n        address indexed seller,\\n        address indexed nftAddress,\\n        uint256 indexed tokenId\\n    );\\n\\n    event TokenGetBack(\\n        address indexed nftAddress,\\n        uint256 indexed tokenId,\\n        address owner\\n    );\\n\\n    event Token_Transfered(\\n        address from,\\n        address to,\\n        address indexed nftAddress,\\n        uint256 indexed tokenId\\n    );\\n\\n    // Utilizziamo una struttura dati che effettua il seguente mapping per un NFT messo in lista di vendita:\\n    // Contract NFT address -> NFT Token Id -> Seller address\\n    mapping(address => mapping(uint256 => address)) private s_listings;\\n\\n    // Mapping per un NFT che si trova nello staking\\n    mapping(address => mapping(uint256 => Transaction)) private s_stakings;\\n\\n    //Tempo limite entro il quale poter restituire il prodotto (e dunque l'NFT)\\n    uint s_returnTime;\\n\\n    // Modifiers\\n\\n    // Modifier per assicurarci che non venga (ri)messo in vendita un NFT gi\\u00e0 listato in precedenza\\n    modifier checkListed(address nftAddress, uint256 tokenId) {\\n        address seller = s_listings[nftAddress][tokenId];\\n        address defaultAddress; // 0x0000000000000000000000000000000000000000\\n        if (seller != defaultAddress) {\\n            // Se il venditore \\u00e8 diverso dall'account \\\"vuoto\\\" allora revert perch\\u00e9 l'NFT \\u00e8 gi\\u00e0 stato messo in vendita\\n            revert NftMarketplace__AlreadyListed(nftAddress, tokenId);\\n        }\\n        _;\\n    }\\n\\n    // Modifier per fare in modo un NFT possa essere messo in vendita esclusivamente dal legittimo proprietario\\n    modifier onlyNftOwner(\\n        address nftAddress,\\n        uint256 tokenId,\\n        address spender\\n    ) {\\n        IERC721 nft = IERC721(nftAddress);\\n        address owner = nft.ownerOf(tokenId); // La funzione ownerOf di IERC721 restituisce l'indirizzo del proprietario dell?NFT con l'id passato come parametro\\n        if (owner != spender) {\\n            //Se l'indirizzo del proprietario non corrisponde con l'indirizzo di chi sta tentando di mettere in vendita l'NFT facciamo il revert\\n            revert NftMarketplace__NotOwner();\\n        }\\n        _;\\n    }\\n\\n    // Modifier per verificare che un NFT \\u00e8 in lista di vendita. Verr\\u00e0 utilizzato nella funzione di acquisto\\n    modifier isListed(address nftAddress, uint256 tokenId) {\\n        address seller = s_listings[nftAddress][tokenId]; // preleviamo l'indirizzo del venditore dal listing\\n        address defaultAddress;\\n        if (seller == defaultAddress) {\\n            // Se l'indirizzo del venditore \\u00e8 un indirizzo nullo allora revert: l'NFT non \\u00e8 in vendita\\n            revert NftMarketplace__NotListed(nftAddress, tokenId);\\n        }\\n        _;\\n    }\\n\\n    // Modifier per controllare che il trasferimento dell'NFT possa avvenire, decorso il tempo di recesso. E' una sorta di trigger\\n    modifier stakeCheck(address nftAddress, uint256 tokenId) {\\n        uint start = s_stakings[nftAddress][tokenId].startTimestamp;\\n        if (block.timestamp < (start + s_returnTime)) {\\n            revert NftMarketplace__StillTimeToRecess();\\n        }\\n        _;\\n    }\\n\\n    // Modifier che permette la restituzione dell'NFT solo se esso \\u00e8 in staking (cio\\u00e8 siamo ancora nel periodo di recesso)\\n    modifier inStaking(address nftAddress, uint256 tokenId) {\\n        uint startTimestamp = s_stakings[nftAddress][tokenId].startTimestamp;\\n        if (startTimestamp == 0) {\\n            revert NftMarketplace__NotInStaking(nftAddress, tokenId);\\n        }\\n        _;\\n    }\\n\\n    // Modifier affinch\\u00e9 la restituzione dell'NFT sia richiamabile solamente da colui che risulta il buyer nella struttura dati Transaction\\n    modifier onlyBuyer(address nftAddress, uint256 tokenId) {\\n        address buyer = s_stakings[nftAddress][tokenId].buyer;\\n        if (msg.sender != buyer) {\\n            revert NftMarketplace__NotAllowed();\\n        }\\n        _;\\n    }\\n\\n    // Constructor\\n    constructor(uint returnTime) {\\n        s_returnTime = returnTime;\\n    }\\n\\n    /////////////////////\\n    // Main Functions //\\n    ////////////////////\\n\\n    // La funzione per pubblicare un annuncio di vendita la definiamo come external perch\\u00e9 vogliamo che possa essere richiamata anche da progetti esterni o account esterni\\n    // Dobbiamo assicurarci inoltre che l'NFT in questione non sia gi\\u00e0 stato messo in vendita precedentemente e che chi richiama la funzione sia effettivamente il proprietario dell'NFT. Queste due verifiche le facciamo tramite due modifiers\\n    function listItem(\\n        address nftAddress,\\n        uint256 tokenId\\n    )\\n        external\\n        checkListed(nftAddress, tokenId)\\n        onlyNftOwner(nftAddress, tokenId, msg.sender)\\n    {\\n        // I proprietari di NFT, quando pubblicano un \\\"annuncio di vendita\\\", mantengono comunque la propriet\\u00e0 dei propri NFT ma danno l'approvazione al marketplace di trasferire l'NFT per loro conto.\\n\\n        // Ci dobbiamo assicurare che il contratto marketplace ottenga l'approvazione per lavorare con l'NFT.\\n        // A tal proposito possiamo richiamare la funzione getApproved() dell'interfaccia IERC721 che abbiamo importato\\n        IERC721 nft = IERC721(nftAddress); // Creiamo un oggetto di tipo IERC721 passando all'interfaccia l'indirizzo del contratto relativo all'NFT da manipolare\\n        if (nft.getApproved(tokenId) != address(this)) {\\n            //Alla getApproved passiamo l'id del token. Se l'account approvato per manipolare il token con quell'id risulta diverso dall'account relativo al marketplace allora facciamo il revert\\n            revert NftMarketplace__NotApprovedForMarketplace();\\n        }\\n\\n        s_listings[nftAddress][tokenId] = msg.sender; // Update del mapping con le informazioni sul venitore, cio\\u00e8 colui che richiama la funzione listItem\\n        emit ItemListed(msg.sender, nftAddress, tokenId); // Emissione dell'evento relativo al listing avvenuto\\n    }\\n\\n    //Funzione di acquisto che innesca lo staking dell'NFT per il lasso di tempo di possibile rimborso\\n    //External perch\\u00e8 solamente persone o altri smart contract al di fuori di questo andranno a richiamare la funzione buyItem.\\n    //N.B pagamento non gestito tramite criptomoneta\\n    function buyItem(\\n        address nftAddress,\\n        uint256 tokenId\\n    ) external isListed(nftAddress, tokenId) nonReentrant {\\n        // Recupero del venditore\\n        address nftSeller = s_listings[nftAddress][tokenId];\\n\\n        // Si popola la struttura dati Transaction che interessa l'NFT\\n        s_stakings[nftAddress][tokenId].seller = nftSeller;\\n        s_stakings[nftAddress][tokenId].buyer = msg.sender;\\n        s_stakings[nftAddress][tokenId].startTimestamp = block.timestamp;\\n\\n        // A questo punto dobbiamo eliminare l'annuncio di vendita dal mapping s_listings\\n        delete (s_listings[nftAddress][tokenId]); // La funzione delete permette di eliminare un entry da un mapping\\n\\n        emit ItemBought(msg.sender, nftAddress, tokenId);\\n    }\\n\\n    function transferTokenAfterTime(\\n        address nftAddress,\\n        uint256 tokenId\\n    ) external stakeCheck(nftAddress, tokenId) inStaking(nftAddress, tokenId) {\\n        // Terminato il tempo per la restituzione (senza precedente recesso): avviene il passaggio ufficiale di propriet\\u00e0\\n        // Trasferimento del token dal venditore all'acquirente (recuperati dalla struttura dati Transaction)\\n        address from = s_stakings[nftAddress][tokenId].seller;\\n        address to = s_stakings[nftAddress][tokenId].buyer;\\n\\n        // Reset dell'entry legata all'NFT in questione all'interno del mapping\\n        delete (s_stakings[nftAddress][tokenId]);\\n\\n        // Per il trasferiento utilizziamo la funzione safeTransferFrom di IERC721 a cui dobbiamo passare: from, to e tokenId\\n        IERC721(nftAddress).safeTransferFrom(from, to, tokenId);\\n        emit Token_Transfered(from, to, nftAddress, tokenId);\\n    }\\n\\n    function takeBackToken(\\n        address nftAddress,\\n        uint256 tokenId\\n    ) external inStaking(nftAddress, tokenId) onlyBuyer(nftAddress, tokenId) {\\n        address owner = s_stakings[nftAddress][tokenId].seller;\\n        delete (s_stakings[nftAddress][tokenId]);\\n        emit TokenGetBack(nftAddress, tokenId, owner);\\n    }\\n\\n    // Le due seguenti funzioni servono per redere compatibile lo smart contract con l'interfaccia AutomationCompatible\\n    // La checkUpkeep riceve come parametro di input dei bytes: gli passeremo l'indirizzo dell'NFT e il token id codificati\\n    function checkUpkeep(\\n        bytes calldata address_id_encoded\\n    )\\n        external\\n        view\\n        override\\n        returns (bool upkeepNeeded, bytes memory performData)\\n    {\\n        (address nftAddress, uint256 tokenId) = multiDecodeNFTData(\\n            address_id_encoded\\n        );\\n        uint256 startTimestamp = s_stakings[nftAddress][tokenId].startTimestamp;\\n\\n        upkeepNeeded = block.timestamp > (startTimestamp + s_returnTime);\\n        performData = address_id_encoded;\\n    }\\n\\n    function performUpkeep(bytes calldata performData) external override {\\n        //We highly recommend revalidating the upkeep in the performUpkeep function\\n        (address nftAddress, uint256 tokenId) = multiDecodeNFTData(performData);\\n        uint256 startTimestamp = s_stakings[nftAddress][tokenId].startTimestamp;\\n        if (block.timestamp > (startTimestamp + s_returnTime)) {\\n            address seller = s_stakings[nftAddress][tokenId].seller;\\n            address buyer = s_stakings[nftAddress][tokenId].buyer;\\n\\n            // Trasferimento del token dal venditore all'acquirente (cio\\u00e8 a chi sta richiamando la funzione corrente)\\n            // Per fare ci\\u00f2 utilizziamo la funzione safeTransferFrom di IERC721 a cui dobbiamo passare: from, to e tokenId\\n            IERC721(nftAddress).safeTransferFrom(seller, buyer, tokenId);\\n        }\\n    }\\n\\n    // Funzione per rimuovere un NFT dal marketplace.\\n    // Utilizziamo il modifer per assicurarci che solo il proprietario dell'NFT possa richiamare tale funzione\\n    // Utilizziamo il modifier per assicurarci che l?NFT da rimuovere sia stato precedentemente messo in vendita\\n    function cancelListing(\\n        address nftAddress,\\n        uint256 tokenId\\n    )\\n        external\\n        onlyNftOwner(nftAddress, tokenId, msg.sender)\\n        isListed(nftAddress, tokenId)\\n    {\\n        delete (s_listings[nftAddress][tokenId]);\\n        emit ItemCancelled(msg.sender, nftAddress, tokenId);\\n    }\\n\\n    // Funzioni ausiliarie\\n    function multiEncodeNFTData(\\n        address nftAddress,\\n        uint256 tokenId\\n    ) public pure returns (bytes memory) {\\n        bytes memory someString = abi.encode(nftAddress, tokenId);\\n        return someString;\\n    }\\n\\n    function multiDecodeNFTData(\\n        bytes memory encoded\\n    ) public pure returns (address, uint256) {\\n        (address nftAddress, uint256 tokenId) = abi.decode(\\n            encoded,\\n            (address, uint256)\\n        );\\n        return (nftAddress, tokenId);\\n    }\\n\\n    /*  // Aggiornamento informazioni del Listing (prezzo di vendita)\\n    function updateListing(\\n        address nftAddress,\\n        uint256 tokenId,\\n        uint256 newPrice\\n    )\\n        external\\n        onlyNftOwner(nftAddress, tokenId, msg.sender)\\n        isListed(nftAddress, tokenId)\\n    {\\n        s_listings[nftAddress][tokenId].price = newPrice;\\n        emit ItemListed(msg.sender, nftAddress, tokenId, newPrice); // Update = nuovo Listing\\n    } */\\n\\n    /* // Funzione tramite cui ogni venditore pu\\u00f2 ritirare quanto accumulato dalle vendite portate a termine\\n    function withdrawProceeds() external {\\n        uint256 proceeds = s_proceeds[msg.sender]; // Ricaviamo la somma disponibile per il prelievo (quanto ottenuto fino a questo momento dalle vendite)\\n        if (proceeds <= 0) {\\n            revert NftMarketplace__NoProceeds();\\n        }\\n        // Se la somma disponibile al ritiro \\u00e8 maggiore di 0 allora aggiornamento della struttura dati e invio dei soldi a chi ha richiamato la funzione\\n        s_proceeds[msg.sender] = 0;\\n\\n        (bool success, ) = payable(msg.sender).call{value: proceeds}(\\\"\\\");\\n        if (!success) {\\n            revert NftMarketplace__TransferFailed();\\n        }\\n    }\\n */\\n    // Getters\\n\\n    function getSeller(\\n        address nftAddress,\\n        uint256 tokenId\\n    ) public view returns (address) {\\n        return s_listings[nftAddress][tokenId];\\n    }\\n\\n    function getTransaction(\\n        address nftAddress,\\n        uint256 tokenId\\n    ) public view returns (address, address) {\\n        address nftSeller = s_stakings[nftAddress][tokenId].seller;\\n        address nftBuyer = s_stakings[nftAddress][tokenId].buyer;\\n        return (nftSeller, nftBuyer);\\n    }\\n\\n    function getReturnTime() public view returns (uint) {\\n        return s_returnTime;\\n    }\\n}\\n\",\"keccak256\":\"0xe9079d068752a2e51c1e36a794d26ab7b42bedba8773e73e3123cfd53aaf10ba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200205a3803806200205a83398181016040528101906200003791906200008d565b60016000819055508060038190555050620000bf565b600080fd5b6000819050919050565b620000678162000052565b81146200007357600080fd5b50565b60008151905062000087816200005c565b92915050565b600060208284031215620000a657620000a56200004d565b5b6000620000b68482850162000076565b91505092915050565b611f8b80620000cf6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80639f37092a116100715780639f37092a146101b3578063a43293b4146101cf578063a8423f8114610200578063b2ddee061461021e578063b8e5efcd1461023a578063cd72d09814610256576100b4565b80630cbdaa29146100b95780630f237a93146100ea578063189ecff11461011a5780634585e33b1461014a5780635e2f003b146101665780636e04ff0d14610182575b600080fd5b6100d360048036038101906100ce9190611a0d565b610272565b6040516100e1929190611ab0565b60405180910390f35b61010460048036038101906100ff9190611b31565b61029d565b6040516101119190611bf0565b60405180910390f35b610134600480360381019061012f9190611b31565b6102cf565b6040516101419190611c12565b60405180910390f35b610164600480360381019061015f9190611c8d565b61034a565b005b610180600480360381019061017b9190611b31565b610574565b005b61019c60048036038101906101979190611c8d565b610925565b6040516101aa929190611cf5565b60405180910390f35b6101cd60048036038101906101c89190611b31565b610a38565b005b6101e960048036038101906101e49190611b31565b610dfb565b6040516101f7929190611d25565b60405180910390f35b610208610efd565b6040516102159190611d4e565b60405180910390f35b61023860048036038101906102339190611b31565b610f07565b005b610254600480360381019061024f9190611b31565b6111b8565b005b610270600480360381019061026b9190611b31565b6114b3565b005b6000806000808480602001905181019061028c9190611dbc565b915091508181935093505050915091565b6060600083836040516020016102b4929190611ab0565b60405160208183030381529060405290508091505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b60008061039a84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610272565b915091506000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020600201549050600354816104049190611e2b565b42111561056d576000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508473ffffffffffffffffffffffffffffffffffffffff166342842e0e8383876040518463ffffffff1660e01b815260040161053893929190611e5f565b600060405180830381600087803b15801561055257600080fd5b505af1158015610566573d6000803e3d6000fd5b5050505050505b5050505050565b81816000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461065f5783836040517fc2f0d709000000000000000000000000000000000000000000000000000000008152600401610656929190611ab0565b60405180910390fd5b858533600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b81526004016106a29190611d4e565b602060405180830381865afa1580156106bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e39190611eab565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461074a576040517f94953b6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008b90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8d6040518263ffffffff1660e01b815260040161079f9190611d4e565b602060405180830381865afa1580156107bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e09190611eab565b73ffffffffffffffffffffffffffffffffffffffff161461082d576040517f13e7d28d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600160008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508a8c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe664fba7e620635adc11289eccf06ecb889c3875d377d16291a5d77292f6309160405160405180910390a4505050505050505050505050565b6000606060008061097986868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610272565b915091506000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020600201549050600354816109e39190611e2b565b4211945086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505093505050509250929050565b81816000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b235783836040517f6d350f22000000000000000000000000000000000000000000000000000000008152600401610b1a929190611ab0565b60405180910390fd5b610b2b61185a565b6000600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555042600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088815260200190815260200160002060020181905550600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055858773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f1d23a6255c78522601b841bc62d88a98b1e9a358d1b16957143effa889faa03c60405160405180910390a450610df36118a9565b505050505050565b6000806000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081819350935050509250929050565b6000600354905090565b818133600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610f4a9190611d4e565b602060405180830381865afa158015610f67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8b9190611eab565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ff2576040517f94953b6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b86866000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036110dd5783836040517f6d350f220000000000000000000000000000000000000000000000000000000081526004016110d4929190611ab0565b60405180910390fd5b600160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055898b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f6e08c1d889d309942730e4afa7963d0c5294a34a479f2c8cf39a953f287dcdee60405160405180910390a45050505050505050505050565b81816000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020600201549050600081036112595782826040517f06686ee6000000000000000000000000000000000000000000000000000000008152600401611250929190611ab0565b60405180910390fd5b84846000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611338576040517f0ea663a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000898152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560028201600090555050878973ffffffffffffffffffffffffffffffffffffffff167f57fee1546b7cbad9e8f139b09144179145c4891f1c5cc7df3f4eff5f0f711f6b836040516114a09190611c12565b60405180910390a3505050505050505050565b81816000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206002015490506003548161151b9190611e2b565b421015611554576040517f8f9eef1a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84846000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020600201549050600081036115f55782826040517f06686ee60000000000000000000000000000000000000000000000000000000081526004016115ec929190611ab0565b60405180910390fd5b6000600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a8152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282016000905550508973ffffffffffffffffffffffffffffffffffffffff166342842e0e83838c6040518463ffffffff1660e01b81526004016117cb93929190611e5f565b600060405180830381600087803b1580156117e557600080fd5b505af11580156117f9573d6000803e3d6000fd5b50505050888a73ffffffffffffffffffffffffffffffffffffffff167f69d867b641c5c3bbcb23288d575b06771ffacf13498031f2ae1a252edb64b85d8484604051611846929190611d25565b60405180910390a350505050505050505050565b60026000540361189f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189690611f35565b60405180910390fd5b6002600081905550565b6001600081905550565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61191a826118d1565b810181811067ffffffffffffffff82111715611939576119386118e2565b5b80604052505050565b600061194c6118b3565b90506119588282611911565b919050565b600067ffffffffffffffff821115611978576119776118e2565b5b611981826118d1565b9050602081019050919050565b82818337600083830152505050565b60006119b06119ab8461195d565b611942565b9050828152602081018484840111156119cc576119cb6118cc565b5b6119d784828561198e565b509392505050565b600082601f8301126119f4576119f36118c7565b5b8135611a0484826020860161199d565b91505092915050565b600060208284031215611a2357611a226118bd565b5b600082013567ffffffffffffffff811115611a4157611a406118c2565b5b611a4d848285016119df565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a8182611a56565b9050919050565b611a9181611a76565b82525050565b6000819050919050565b611aaa81611a97565b82525050565b6000604082019050611ac56000830185611a88565b611ad26020830184611aa1565b9392505050565b611ae281611a76565b8114611aed57600080fd5b50565b600081359050611aff81611ad9565b92915050565b611b0e81611a97565b8114611b1957600080fd5b50565b600081359050611b2b81611b05565b92915050565b60008060408385031215611b4857611b476118bd565b5b6000611b5685828601611af0565b9250506020611b6785828601611b1c565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611bab578082015181840152602081019050611b90565b60008484015250505050565b6000611bc282611b71565b611bcc8185611b7c565b9350611bdc818560208601611b8d565b611be5816118d1565b840191505092915050565b60006020820190508181036000830152611c0a8184611bb7565b905092915050565b6000602082019050611c276000830184611a88565b92915050565b600080fd5b600080fd5b60008083601f840112611c4d57611c4c6118c7565b5b8235905067ffffffffffffffff811115611c6a57611c69611c2d565b5b602083019150836001820283011115611c8657611c85611c32565b5b9250929050565b60008060208385031215611ca457611ca36118bd565b5b600083013567ffffffffffffffff811115611cc257611cc16118c2565b5b611cce85828601611c37565b92509250509250929050565b60008115159050919050565b611cef81611cda565b82525050565b6000604082019050611d0a6000830185611ce6565b8181036020830152611d1c8184611bb7565b90509392505050565b6000604082019050611d3a6000830185611a88565b611d476020830184611a88565b9392505050565b6000602082019050611d636000830184611aa1565b92915050565b6000611d7482611a56565b9050919050565b611d8481611d69565b8114611d8f57600080fd5b50565b600081519050611da181611d7b565b92915050565b600081519050611db681611b05565b92915050565b60008060408385031215611dd357611dd26118bd565b5b6000611de185828601611d92565b9250506020611df285828601611da7565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611e3682611a97565b9150611e4183611a97565b9250828201905080821115611e5957611e58611dfc565b5b92915050565b6000606082019050611e746000830186611a88565b611e816020830185611a88565b611e8e6040830184611aa1565b949350505050565b600081519050611ea581611ad9565b92915050565b600060208284031215611ec157611ec06118bd565b5b6000611ecf84828501611e96565b91505092915050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611f1f601f83611ed8565b9150611f2a82611ee9565b602082019050919050565b60006020820190508181036000830152611f4e81611f12565b905091905056fea264697066735822122008099d077e67d06803220acc8e194634b57253ca116292188b1eb059286183ec64736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80639f37092a116100715780639f37092a146101b3578063a43293b4146101cf578063a8423f8114610200578063b2ddee061461021e578063b8e5efcd1461023a578063cd72d09814610256576100b4565b80630cbdaa29146100b95780630f237a93146100ea578063189ecff11461011a5780634585e33b1461014a5780635e2f003b146101665780636e04ff0d14610182575b600080fd5b6100d360048036038101906100ce9190611a0d565b610272565b6040516100e1929190611ab0565b60405180910390f35b61010460048036038101906100ff9190611b31565b61029d565b6040516101119190611bf0565b60405180910390f35b610134600480360381019061012f9190611b31565b6102cf565b6040516101419190611c12565b60405180910390f35b610164600480360381019061015f9190611c8d565b61034a565b005b610180600480360381019061017b9190611b31565b610574565b005b61019c60048036038101906101979190611c8d565b610925565b6040516101aa929190611cf5565b60405180910390f35b6101cd60048036038101906101c89190611b31565b610a38565b005b6101e960048036038101906101e49190611b31565b610dfb565b6040516101f7929190611d25565b60405180910390f35b610208610efd565b6040516102159190611d4e565b60405180910390f35b61023860048036038101906102339190611b31565b610f07565b005b610254600480360381019061024f9190611b31565b6111b8565b005b610270600480360381019061026b9190611b31565b6114b3565b005b6000806000808480602001905181019061028c9190611dbc565b915091508181935093505050915091565b6060600083836040516020016102b4929190611ab0565b60405160208183030381529060405290508091505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b60008061039a84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610272565b915091506000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020600201549050600354816104049190611e2b565b42111561056d576000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508473ffffffffffffffffffffffffffffffffffffffff166342842e0e8383876040518463ffffffff1660e01b815260040161053893929190611e5f565b600060405180830381600087803b15801561055257600080fd5b505af1158015610566573d6000803e3d6000fd5b5050505050505b5050505050565b81816000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461065f5783836040517fc2f0d709000000000000000000000000000000000000000000000000000000008152600401610656929190611ab0565b60405180910390fd5b858533600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b81526004016106a29190611d4e565b602060405180830381865afa1580156106bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e39190611eab565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461074a576040517f94953b6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008b90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663081812fc8d6040518263ffffffff1660e01b815260040161079f9190611d4e565b602060405180830381865afa1580156107bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e09190611eab565b73ffffffffffffffffffffffffffffffffffffffff161461082d576040517f13e7d28d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600160008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508a8c73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe664fba7e620635adc11289eccf06ecb889c3875d377d16291a5d77292f6309160405160405180910390a4505050505050505050505050565b6000606060008061097986868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610272565b915091506000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020600201549050600354816109e39190611e2b565b4211945086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505093505050509250929050565b81816000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b235783836040517f6d350f22000000000000000000000000000000000000000000000000000000008152600401610b1a929190611ab0565b60405180910390fd5b610b2b61185a565b6000600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555042600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088815260200190815260200160002060020181905550600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600087815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055858773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f1d23a6255c78522601b841bc62d88a98b1e9a358d1b16957143effa889faa03c60405160405180910390a450610df36118a9565b505050505050565b6000806000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081819350935050509250929050565b6000600354905090565b818133600083905060008173ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b8152600401610f4a9190611d4e565b602060405180830381865afa158015610f67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8b9190611eab565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ff2576040517f94953b6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b86866000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036110dd5783836040517f6d350f220000000000000000000000000000000000000000000000000000000081526004016110d4929190611ab0565b60405180910390fd5b600160008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055898b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f6e08c1d889d309942730e4afa7963d0c5294a34a479f2c8cf39a953f287dcdee60405160405180910390a45050505050505050505050565b81816000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020600201549050600081036112595782826040517f06686ee6000000000000000000000000000000000000000000000000000000008152600401611250929190611ab0565b60405180910390fd5b84846000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611338576040517f0ea663a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000898152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560028201600090555050878973ffffffffffffffffffffffffffffffffffffffff167f57fee1546b7cbad9e8f139b09144179145c4891f1c5cc7df3f4eff5f0f711f6b836040516114a09190611c12565b60405180910390a3505050505050505050565b81816000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206002015490506003548161151b9190611e2b565b421015611554576040517f8f9eef1a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84846000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020600201549050600081036115f55782826040517f06686ee60000000000000000000000000000000000000000000000000000000081526004016115ec929190611ab0565b60405180910390fd5b6000600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a8152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282016000905550508973ffffffffffffffffffffffffffffffffffffffff166342842e0e83838c6040518463ffffffff1660e01b81526004016117cb93929190611e5f565b600060405180830381600087803b1580156117e557600080fd5b505af11580156117f9573d6000803e3d6000fd5b50505050888a73ffffffffffffffffffffffffffffffffffffffff167f69d867b641c5c3bbcb23288d575b06771ffacf13498031f2ae1a252edb64b85d8484604051611846929190611d25565b60405180910390a350505050505050505050565b60026000540361189f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189690611f35565b60405180910390fd5b6002600081905550565b6001600081905550565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61191a826118d1565b810181811067ffffffffffffffff82111715611939576119386118e2565b5b80604052505050565b600061194c6118b3565b90506119588282611911565b919050565b600067ffffffffffffffff821115611978576119776118e2565b5b611981826118d1565b9050602081019050919050565b82818337600083830152505050565b60006119b06119ab8461195d565b611942565b9050828152602081018484840111156119cc576119cb6118cc565b5b6119d784828561198e565b509392505050565b600082601f8301126119f4576119f36118c7565b5b8135611a0484826020860161199d565b91505092915050565b600060208284031215611a2357611a226118bd565b5b600082013567ffffffffffffffff811115611a4157611a406118c2565b5b611a4d848285016119df565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a8182611a56565b9050919050565b611a9181611a76565b82525050565b6000819050919050565b611aaa81611a97565b82525050565b6000604082019050611ac56000830185611a88565b611ad26020830184611aa1565b9392505050565b611ae281611a76565b8114611aed57600080fd5b50565b600081359050611aff81611ad9565b92915050565b611b0e81611a97565b8114611b1957600080fd5b50565b600081359050611b2b81611b05565b92915050565b60008060408385031215611b4857611b476118bd565b5b6000611b5685828601611af0565b9250506020611b6785828601611b1c565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611bab578082015181840152602081019050611b90565b60008484015250505050565b6000611bc282611b71565b611bcc8185611b7c565b9350611bdc818560208601611b8d565b611be5816118d1565b840191505092915050565b60006020820190508181036000830152611c0a8184611bb7565b905092915050565b6000602082019050611c276000830184611a88565b92915050565b600080fd5b600080fd5b60008083601f840112611c4d57611c4c6118c7565b5b8235905067ffffffffffffffff811115611c6a57611c69611c2d565b5b602083019150836001820283011115611c8657611c85611c32565b5b9250929050565b60008060208385031215611ca457611ca36118bd565b5b600083013567ffffffffffffffff811115611cc257611cc16118c2565b5b611cce85828601611c37565b92509250509250929050565b60008115159050919050565b611cef81611cda565b82525050565b6000604082019050611d0a6000830185611ce6565b8181036020830152611d1c8184611bb7565b90509392505050565b6000604082019050611d3a6000830185611a88565b611d476020830184611a88565b9392505050565b6000602082019050611d636000830184611aa1565b92915050565b6000611d7482611a56565b9050919050565b611d8481611d69565b8114611d8f57600080fd5b50565b600081519050611da181611d7b565b92915050565b600081519050611db681611b05565b92915050565b60008060408385031215611dd357611dd26118bd565b5b6000611de185828601611d92565b9250506020611df285828601611da7565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611e3682611a97565b9150611e4183611a97565b9250828201905080821115611e5957611e58611dfc565b5b92915050565b6000606082019050611e746000830186611a88565b611e816020830185611a88565b611e8e6040830184611aa1565b949350505050565b600081519050611ea581611ad9565b92915050565b600060208284031215611ec157611ec06118bd565b5b6000611ecf84828501611e96565b91505092915050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611f1f601f83611ed8565b9150611f2a82611ee9565b602082019050919050565b60006020820190508181036000830152611f4e81611f12565b905091905056fea264697066735822122008099d077e67d06803220acc8e194634b57253ca116292188b1eb059286183ec64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "performUpkeep(bytes)": {
        "details": "The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.",
        "params": {
          "performData": "is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "performUpkeep(bytes)": {
        "notice": "method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 68,
        "contract": "contracts/NftMarketplace.sol:NftMarketplace",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3005,
        "contract": "contracts/NftMarketplace.sol:NftMarketplace",
        "label": "s_listings",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 3012,
        "contract": "contracts/NftMarketplace.sol:NftMarketplace",
        "label": "s_stakings",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Transaction)2957_storage))"
      },
      {
        "astId": 3014,
        "contract": "contracts/NftMarketplace.sol:NftMarketplace",
        "label": "s_returnTime",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Transaction)2957_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct NftMarketplace.Transaction))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Transaction)2957_storage)"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Transaction)2957_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NftMarketplace.Transaction)",
        "numberOfBytes": "32",
        "value": "t_struct(Transaction)2957_storage"
      },
      "t_struct(Transaction)2957_storage": {
        "encoding": "inplace",
        "label": "struct NftMarketplace.Transaction",
        "members": [
          {
            "astId": 2952,
            "contract": "contracts/NftMarketplace.sol:NftMarketplace",
            "label": "seller",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2954,
            "contract": "contracts/NftMarketplace.sol:NftMarketplace",
            "label": "buyer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2956,
            "contract": "contracts/NftMarketplace.sol:NftMarketplace",
            "label": "startTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}